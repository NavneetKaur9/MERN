{"version":3,"sources":["components/ListingCard.tsx","components/Constants.ts","components/Content.tsx","components/PageHeader.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","price","fontWeight","ListingCard","props","classes","picture_url","images","name","room_type","beds","property_type","bed_type","cancellation_policy","number_of_reviews","street","address","Card","CardMedia","style","height","image","title","CardContent","Typography","variant","color","noWrap","gutterBottom","className","$numberDecimal","api","loader","padding","pagination","display","flexDirection","justifyContent","margin","appBar","top","bottom","button","marginLeft","searchTextField","width","Content","styles","useState","listings","setListings","isLoading","setIsLoading","page","setPage","searchByLocation","setSearchByLocation","searchByName","setSearchByName","paginationCount","setPaginationCount","locationsList","setLocationsList","searchValue","onclick","e","console","log","useEffect","fetch","method","then","res","json","data","Math","round","length","products","catch","error","Fragment","Grid","container","spacing","item","xs","sm","md","Autocomplete","id","options","getOptionLabel","option","renderInput","params","TextField","label","placeholder","onChange","event","value","reason","target","Button","startIcon","onClick","Dialog","onClose","aria-labelledby","open","CircularProgress","size","map","listingObj","index","key","getListingsCard","AppBar","position","Pagination","count","showFirstButton","showLastButton","menuButton","marginRight","flexGrow","PageHeader","Toolbar","IconButton","edge","aria-label","root","mainContainer","marginTop","paddingBottom","grow","fabButton","zIndex","left","right","ButtonAppBar","CssBaseline","direction","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.11f38119.chunk.js","sourcesContent":["import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { CardMedia } from \"@material-ui/core\";\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n\ntype Props = {\n    images?: IImages;\n}\n\ntype IImages = {\n    picture_url: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        price: {\n            fontWeight: \"bold\",\n        }\n    }),\n);\n\nconst ListingCard = (props: any) => {\n    const classes = useStyles();\n    const { images: { picture_url },\n        name,\n        room_type,\n        beds,\n        property_type,\n        bed_type,\n        cancellation_policy,\n        price,\n        number_of_reviews,\n        address: { street }\n    } = props;\n\n    return (\n        <Card>\n            <CardMedia style={{ height: \"200px\" }} image={picture_url} title={name} />\n            <CardContent>\n\n                <Typography variant=\"body2\" color=\"textSecondary\" noWrap={true}>\n                    {room_type} • {property_type} • {beds} Beds ({bed_type})\n                </Typography>\n                <Typography variant=\"h5\" color=\"primary\" noWrap={true}>\n                    {name}\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom noWrap={true}>\n                    {street}\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\" noWrap={true}>\n                    Cancellation policy : {cancellation_policy}\n                </Typography>\n                <Typography variant=\"body2\" className={classes.price} >\n                    $ {price.$numberDecimal} / night\n                </Typography>\n                <Typography variant=\"body2\" >\n                    {number_of_reviews} Reviews\n                </Typography>\n            </CardContent>\n        </Card>\n    );\n};\n\nexport default ListingCard;\n","export const api = \"http://127.0.0.1:5000/\";","import React, { useState, useEffect } from \"react\";\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { Grid } from \"@material-ui/core\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ListingCard from \"./ListingCard\";\nimport { api } from './Constants';\nimport Dialog from '@material-ui/core/Dialog';\nimport Pagination from '@material-ui/lab/Pagination';\nimport AppBar from '@material-ui/core/AppBar';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport SearchIcon from '@material-ui/icons/Search';\n\ntype IListings = {\n    images?: IImages;\n}\n\ntype IImages = {\n    picture_url?: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        loader: {\n            padding: 10\n        },\n        pagination: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"center\",\n            margin: 20,\n        },\n        appBar: {\n            top: 'auto',\n            bottom: 0,\n        },\n        button: {\n            padding: 15,\n            marginLeft: 1,\n        },\n        searchTextField: {\n            width: '100%',\n        },\n    }),\n);\n\nconst Content = () => {\n    const styles = useStyles();\n    const listingsLimit = 20;\n    const [listings, setListings] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [page, setPage] = useState(1);\n    const [searchByLocation, setSearchByLocation] = useState('');\n    const [searchByName, setSearchByName] = useState('');\n    const [paginationCount, setPaginationCount] = useState(10);\n    const [locationsList, setLocationsList] = useState([]);\n    let searchValue = '';\n    const onclick = ((e: any) => {\n        console.log(\"onclick\", e)\n    });\n\n    const getListingsCard = (listingObj: any, index: number) => {\n        return (\n            <Grid item xs={12} sm={6} md={3} onClick={onclick} key={index}>\n                <ListingCard {...listingObj} />\n            </Grid>\n        );\n    };\n    const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\n        setPage(value);\n    };\n\n    useEffect(() => {\n        setIsLoading(true);\n\n        fetch(api + `api/listings?page=${page}&location=${searchByLocation}&searchByName=${searchByName}&listingsLimit=${listingsLimit}`, {\n            method: 'GET',\n        }).then(res => res.json())\n            .then(data => {\n                setPaginationCount(Math.round(data.length / listingsLimit));\n                setListings(data.products);\n                setIsLoading(false);\n            })\n            .catch(error => {\n                console.log(error);\n                setIsLoading(false);\n            });\n    }, [page, searchByLocation, searchByName]);\n\n    useEffect(() => {\n        fetch(api + `api/listings/locations`, {\n            method: 'GET',\n        }).then(res => res.json())\n            .then(data => {\n                console.log(\"data\", data);\n                setLocationsList(data);\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }, []);\n\n    const onChangeLocation = (event: React.ChangeEvent<unknown>, value: any, reason: string) => {\n        setSearchByLocation(value);\n    }\n\n    const onSearch = (event: any) => {\n        console.log(\"taget::\", event.target);\n        searchValue = event.target.value;\n    }\n    const onClick = () => {\n        setSearchByName(searchValue);\n    }\n    return (\n        <React.Fragment>\n            <Grid container spacing={2}>\n                <Grid item xs={12} sm={5} md={6} >\n                    <Autocomplete\n                        id=\"add-a-location\"\n                        options={locationsList}\n                        getOptionLabel={(option) => option}\n                        renderInput={(params) => <TextField {...params} label=\"Location\" variant=\"outlined\" placeholder=\"Add a location\" />}\n                        onChange={onChangeLocation}\n                    />\n                </Grid>\n\n                <Grid item xs={9} sm={5} md={5} >\n                    <TextField id=\"outlined-basic\" label=\"Search by Name\" variant=\"outlined\" className={styles.searchTextField} onChange={onSearch} />\n                </Grid>\n\n                <Grid item xs={3} sm={2} md={1} >\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={styles.button}\n                        startIcon={<SearchIcon />}\n                        onClick={onClick}\n                    >\n                        Search\n                    </Button>\n                </Grid>\n            </Grid>\n\n            <Grid container spacing={2}>\n                <Dialog onClose={onclick} aria-labelledby=\"simple-dialog-title\" open={isLoading} className={styles.loader}>\n                    <CircularProgress size={80} />\n                </Dialog>\n\n                {listings.map((listingObj, index) => getListingsCard(listingObj, index))}\n                <AppBar position=\"fixed\" color=\"default\" className={styles.appBar}>\n                    <div className={styles.pagination}>\n                        <Pagination count={paginationCount} color=\"primary\" size=\"large\" showFirstButton showLastButton onChange={handleChange} />\n                    </div>\n                </AppBar>\n            </Grid>\n        </React.Fragment>\n    );\n};\n\nexport default Content;\n","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        menuButton: {\n            marginRight: theme.spacing(2),\n        },\n        title: {\n            flexGrow: 1,\n        },\n    }),\n);\n\nexport default function PageHeader() {\n    const classes = useStyles();\n\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n                <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                    <MenuIcon />\n                </IconButton>\n                <Typography variant=\"h6\" className={classes.title}>\n                    Sample AirBnB Listings Dataset\n                </Typography>\n                <Button color=\"inherit\" variant=\"outlined\">Login</Button>\n            </Toolbar>\n        </AppBar>\n    );\n}\n","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { Grid } from \"@material-ui/core\";\nimport Content from './Content';\nimport PageHeader from \"./PageHeader\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    mainContainer: {\n      marginTop: 16,\n      paddingBottom: 100,\n    },\n    grow: {\n      flexGrow: 1,\n    },\n    fabButton: {\n      position: 'absolute',\n      zIndex: 1,\n      top: -30,\n      left: 0,\n      right: 0,\n      margin: '0 auto',\n    },\n  }),\n);\n\nexport default function ButtonAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <PageHeader />\n      <CssBaseline />\n      <Grid container direction=\"column\" className={classes.mainContainer}>\n        <Grid item container>\n          <Grid item xs={1} sm={1} />\n          <Grid item xs={10} sm={10}>\n            <Content />\n          </Grid>\n          <Grid item xs={1} sm={1} />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}